// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  bio       String?
  role      String   @default("user") // user or admin
  createdAt DateTime @default(now())
  
  posts         Post[]
  comments      Comment[]
  postVotes     PostVote[]
  commentVotes  CommentVote[]
}

model Board {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  
  posts Post[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String   // Rich text JSON stored as string
  views     Int      @default(0)
  boardId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  board    Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  votes    PostVote[]
  
  @@index([boardId])
  @@index([userId])
  @@index([createdAt])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  post  Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes CommentVote[]
  
  @@index([postId])
  @@index([userId])
}

model PostVote {
  id        String   @id @default(cuid())
  type      String   // "up" or "down"
  postId    String
  userId    String
  createdAt DateTime @default(now())
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model CommentVote {
  id        String   @id @default(cuid())
  type      String   // "up" or "down"
  commentId String
  userId    String
  createdAt DateTime @default(now())
  
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
}
